using System;

namespace CustomDoublyLinkedList
{
    class StartUp
    {
        static void Main(string[] args)
        {
            var list = new DoublyLinkedList();
            list.AddFirst(100);
            list.AddFirst(101);
            list.AddLast(200);
            list.AddLast(201);
            list.Print(n => Console.WriteLine(n));
            list.PrintHead(n => Console.WriteLine($"Head: {n}"));
            list.PrintTail(n => Console.WriteLine($"Tail: {n}"));
        }
    }
    public class DoublyLinkedList
    {
        private class ListNode 
        {
            public int Value { get; set; }
            public ListNode NextNode { get; set; }
            public ListNode PreviousNode { get; set; }
            public ListNode(int value)
            {
                Value = value;
            }
        }
        private ListNode head;
        private ListNode tail;

        public int Count { get; private set; }

        
        public void AddFirst(int element)
        {
            if (Count == 0)
            {
                head = tail = new ListNode(element);
            }
            else
            {
                var newHead = new ListNode(element);
                newHead.NextNode = head;
                head.PreviousNode = newHead;
                head = newHead;
            }
            Count++;
        }
        public void AddLast(int element)
        {
            if (Count == 0)
            {
                head = tail = new ListNode(element);
            }
            else
            {
                var newTail = new ListNode(element);
                newTail.NextNode = tail;
                tail.PreviousNode = newTail;
                tail = newTail;
            }
            Count++;
        }
        public int RemoveFirst()
        {
            if(Count == 0)
            {
                throw new InvalidOperationException("The list is empty!");
            }
            var firstElement = head.Value;
            head = head.NextNode;
            if (head != null)
            {
                head.PreviousNode = null;
            }
            else
            {
                tail = null;
            }
            Count--;
            return firstElement;
        }
        public int RemoveLast()
        {
            if (Count == 0)
            {
                throw new InvalidOperationException("The list is empty!");
            }
            var lastElement = tail.Value;
            tail = tail.PreviousNode;
            if (tail != null)
            {
                tail.NextNode = null;
            }
            else
            {
                head = null;
            }
            Count--;
            return lastElement;
        }
        public void Print(Action<int> action)
        {
            var current = tail;
            while (current != null)
            {
                
                action(current.Value);
                current = current.NextNode;
                
            }
            if (current == null)
            {
                var currentHead = head;
                action(currentHead.Value);
                currentHead = currentHead.PreviousNode;
            }
        }
        public void PrintHead(Action<int> action)
        {
            var current = head;
            while (current != null)
            {
                action(current.Value);
                current = current.PreviousNode;                
            }
            
        }
        public void PrintTail(Action<int> action)
        {
            var current = tail;
            while (current != null)
            {
                action(current.Value);
                current = current.PreviousNode;
            }
        }    
    }
}
