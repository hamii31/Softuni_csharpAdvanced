using System;
using System.Collections.Generic;
using System.Linq;

namespace Multidimensional_Arrays
{
    class Program
    {
        static void Main(string[] args)
        {
            var input = Console.ReadLine().Split(", ").Select(int.Parse).ToArray();
            int rows = input[0], cols = input[1];
            var matrix = new int[rows, cols];
            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                var nums = Console.ReadLine().Split(", ").Select(int.Parse).ToArray();
                for (int col = 0; col < matrix.GetLength(1); col++)
                {
                    matrix[row, col] = nums[col];
                }
            }
            var biggestSum = int.MinValue;
            var submatrix = new int[2, 2];
            var smNums = new Queue<int>();
            for (int row = 0; row < matrix.GetLength(0) - 1; row++)
            {
                for (int col = 0; col < matrix.GetLength(1) - 1; col++)
                {
                    var newSquareSum = matrix[row, col] + matrix[row + 1, col] +
                                       matrix[row, col + 1] + matrix[row + 1, col + 1];
                    if (newSquareSum > biggestSum)
                    {
                        biggestSum = newSquareSum;
                        if (smNums.Count == 0)
                        {
                            smNums.Enqueue(matrix[row, col]);
                            smNums.Enqueue(matrix[row, col + 1]);
                            smNums.Enqueue(matrix[row + 1, col]);
                            smNums.Enqueue(matrix[row + 1, col + 1]);
                        }
                        else
                        {
                            for (int i = 0; i < 4; i++)
                            {
                                smNums.Dequeue();
                            }
                            smNums.Enqueue(matrix[row, col]);
                            smNums.Enqueue(matrix[row, col + 1]);
                            smNums.Enqueue(matrix[row + 1, col]);
                            smNums.Enqueue(matrix[row + 1, col + 1]);
                        }
                    }
                   
                }
            }
            for (int r = 0; r < 2; r++)
            {
                for (int c = 0; c < 2; c++)
                {
                    Console.Write("{0} ", submatrix[r, c] = smNums.Dequeue());
                }
                Console.WriteLine();
            }
            Console.WriteLine(biggestSum);
            
        }
    }
}
