using System;
using System.Collections.Generic;
using System.Linq;

namespace examPrep
{
    class Program
    {
        static void Main(string[] args)
        {
            var whiteTilesStack = new Stack<int>(Console.ReadLine().Split(" ",StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse));
            var greyTilesQueue = new Queue<int>(Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse));

            var sinkCount = 0;
            var ovenCount = 0;
            var countertopCount = 0;
            var wallCount = 0;
            var floorCount = 0;
            
            var calculationsList = new List<int>();
            var whiteTiles = whiteTilesStack.Count;
            var greyTiles = greyTilesQueue.Count;
            for (int i = 0; i < whiteTiles; i++)
            {
                for (int x = 0; x < greyTiles; x++)
                {
                    if (whiteTilesStack.Count == 0 || greyTilesQueue.Count == 0)
                    {
                        break;
                    }
                    if (whiteTilesStack.Peek() == greyTilesQueue.Peek())
                    {
                        calculationsList.Add(whiteTilesStack.Pop());
                        calculationsList.Add(greyTilesQueue.Dequeue());
                        switch (calculationsList.Sum())
                        {
                            case 40:
                                sinkCount++;
                                break;
                            case 50:
                                ovenCount++;
                                break;
                            case 60:
                                countertopCount++;
                                break;
                            case 70:
                                wallCount++;
                                break;
                            default:
                                floorCount++;
                                break;
                        }
                        calculationsList.Clear();
                    }
                    else if (whiteTilesStack.Peek() != greyTilesQueue.Peek())
                    {
                       
                        var modifiedWhiteTile = whiteTilesStack.Pop() / 2;
                        whiteTilesStack.Push(modifiedWhiteTile);
                        var newGreyTile = greyTilesQueue.Dequeue();
                        greyTilesQueue.Enqueue(newGreyTile);
                        whiteTiles += 1;
                        greyTiles += 1;
                    }
                }
            }
            if (whiteTilesStack.Count == 0)
            {
                Console.WriteLine("White tiles left: none");
            }
            else if (whiteTilesStack.Count != 0)
            {
                Console.Write("White tiles left: ");
                Console.WriteLine(string.Join(", ", whiteTilesStack));
            }
            if (greyTilesQueue.Count == 0)
            {
                Console.WriteLine("Grey tiles left: none");
            }
            else if (greyTilesQueue.Count != 0)
            {
                Console.Write("Grey tiles left: ");
                Console.WriteLine(string.Join(", ", greyTilesQueue));
            }
            if (floorCount != 0)
            {
                Console.WriteLine($"Floor: {floorCount}");
            }
            if (countertopCount != 0)
            {
                Console.WriteLine($"Countertop: {countertopCount}");
            }
            if (ovenCount != 0)
            {
                Console.WriteLine($"Oven: {ovenCount}");
            }
            if (sinkCount != 0)
            {
                Console.WriteLine($"Sink: {sinkCount}");
            }
            if (wallCount != 0)
            {
                Console.WriteLine($"Wall: {wallCount}");
            }
           
        }
    }
}
